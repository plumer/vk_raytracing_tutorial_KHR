#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

// Camera buffer uses binding = 0, and uses set = 1.
layout(binding = 0, set = 1) uniform CameraProperties {
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 proj_inverse;
} cam;

layout(push_constant) uniform Constants {
    vec4  clear_color;
    vec3  light_position;
    float light_intensity;
    int   light_type;
    int   frame;
} push_c;


layout (location = 0) rayPayloadEXT HitPayload prd;

// Initializes the random seed.
uint seed = tiny_encryption(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, 
                            push_c.frame);

const int kNBSamples = 3;

void main() 
{
    float random_0 = rand(seed);
    float random_1 = rand(seed);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    vec3 hit_values = vec3(0);

    for (int smpl = 0; smpl < kNBSamples; smpl++) {
        float random_0 = rand(seed);
        float random_1 = rand(seed);

        // Subpixel jitter: sends the ray through a different position inside 
        // the pixel each time, to provide anti-aliasing.
        vec2 subpixel_jitter = push_c.frame == 0 ? vec2(0.5f, 0.5f) : 
                                                   vec2(random_0, random_1);
        const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
        vec2 d = in_uv * 2.0 - 1.0;

        // Computes light origin and direction.
        vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target = cam.proj_inverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        traceRayEXT(topLevelAS,
                    ray_flags,
                    0xFF,           // Cull mask
                    0,              // SBT record offset
                    0,              // SBT record stride
                    0,              // miss index
                    origin.xyz,     // ray origin
                    t_min,
                    direction.xyz,
                    t_max,
                    0               // payload (location = 0)
                    );

        hit_values += prd.hit_value;
    }

    prd.hit_value = hit_values / kNBSamples;
    
    //imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(0.5, 0.5, 0.5, 1.0));
    // Accumulates radiance over time
    if (push_c.frame > 0) {
        float a =   1.0f / float(push_c.frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), 
                   vec4(mix(old_color, prd.hit_value, a), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hit_value, 1.0));
    }
}
