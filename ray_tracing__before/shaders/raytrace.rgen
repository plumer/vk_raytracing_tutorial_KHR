#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

// Camera buffer uses binding = 0, and uses set = 1.
layout(binding = 0, set = 1) uniform CameraProperties {
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 proj_inverse;
} cam;

layout (location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    //imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(0.5, 0.5, 0.5, 1.0));
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5, 0.5);
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    // Computes light origin and direction.
    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);
    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    traceRayEXT(topLevelAS,
                ray_flags,
                0xFF,           // Cull mask
                0,              // SBT record offset
                0,              // SBT record stride
                0,              // miss index
                origin.xyz,     // ray origin
                t_min,
                direction.xyz,
                t_max,
                0               // payload (location = 0)
                );
    
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hit_value, 1.0));
}
