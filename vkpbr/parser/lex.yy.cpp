#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t   flex_int8_t;
typedef uint8_t  flex_uint8_t;
typedef int16_t  flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t  flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char        flex_int8_t;
typedef short int          flex_int16_t;
typedef int                flex_int32_t;
typedef unsigned char      flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int       flex_uint32_t;



#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <iostream>
#include <cassert>
/* end standard C++ headers. */
/* %endif */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t)0)
#endif

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR)(c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
 *       access to the local variable yy_act. Since yyless() is a macro, it would break
 *       existing scanners that call yyless() from OUTSIDE yylex.
 *       One obvious solution it to make yy_act a global. I tried that, and saw
 *       a 5% performance hit in a non-yylineno scanner, because yy_act is
 *       normally declared as a register variable-- so it is not worth it.
 */
#define YY_LESS_LINENO(n)                                                                          \
    do {                                                                                           \
        int yyl;                                                                                   \
        for (yyl = n; yyl < yyleng; ++yyl)                                                         \
            if (yytext[yyl] == '\n')                                                               \
                --yylineno;                                                                        \
    } while (0)
#define YY_LINENO_REWIND_TO(dst)                                                                   \
    do {                                                                                           \
        const char* p;                                                                             \
        for (p = yy_cp - 1; p >= (dst); --p)                                                       \
            if (*p == '\n')                                                                        \
                --yylineno;                                                                        \
    } while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                                  \
    do {                                                                                           \
        /* Undo effects of setting up yytext. */                                                   \
        int yyless_macro_arg = (n);                                                                \
        YY_LESS_LINENO(yyless_macro_arg);                                                          \
        *yy_cp                                = (yy_hold_char);                                    \
        YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ;    \
        YY_DO_BEFORE_ACTION; /* set up yytext again */                                             \
    } while (0)
#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
    /* %if-c-only */
    /* %endif */

    /* %if-c++-only */
    std::streambuf* yy_input_file;
    /* %endif */

    char* yy_ch_buf;  /* input buffer */
    char* yy_buf_pos; /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    int yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void* yyalloc(yy_size_t);
void* yyrealloc(void*, yy_size_t);
void  yyfree(void*);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                                                         \
    {                                                                                              \
        if (!YY_CURRENT_BUFFER) {                                                                  \
            yyensure_buffer_stack();                                                               \
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                        \
        }                                                                                          \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                              \
    }
#define yy_set_bol(at_bol)                                                                         \
    {                                                                                              \
        if (!YY_CURRENT_BUFFER) {                                                                  \
            yyensure_buffer_stack();                                                               \
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);                        \
        }                                                                                          \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                              \
    }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>
int yyFlexLexer::yylex()
{
    LexerError("yyFlexLexer::yylex invoked but %option yyclass used");
    return 0;
}

#define YY_DECL int pbr::Tokenizer::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION                                                                        \
    (yytext_ptr) = yy_bp;                                                                          \
    /* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */                       \
    yyleng         = (int)(yy_cp - yy_bp);                                                         \
    (yy_hold_char) = *yy_cp;                                                                       \
    *yy_cp         = '\0';                                                                         \
    /* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */                      \
    (yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 46
#define YY_END_OF_BUFFER 47
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[336] = {
    0,  0,  0,  47, 45, 40, 40, 45, 45, 45, 45, 41, 45, 45, 45, 45, 45, 45, 45, 45, 45,
    45, 45, 45, 45, 38, 39, 0,  43, 0,  44, 0,  41, 42, 41, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  41, 0,  41,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  42, 0,  0,  0,  0,  0,  0,  0,  7,  0,  0,

    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  41, 0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  23,
    19, 0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  9,  0,  0,  0,  0,  2,  0,  0,  0,  0,
    0,  0,  0,  24, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  20, 0,  0,  0,  0,  0,

    0,  0,  0,  0,  0,  21, 0,  0,  0,  18, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    11, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  36, 0,  0,  0,  27, 22, 0,
    0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10, 5,
    0,  0,  0,  0,  0,  0,  16, 0,  0,  0,  0,  31, 35, 0,  8,  0,  0,  0,  0,  0,  13,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  15, 0,  0,  0,  0,  0,

    0,  0,  0,  33, 0,  0,  0,  0,  12, 0,  0,  0,  0,  0,  0,  37, 0,  14, 17, 28, 0,
    0,  0,  32, 30, 0,  0,  25, 0,  0,  26, 34, 0,  29, 0};

static const YY_CHAR yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1, 2,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1, 4,  5,  1,  1,  1,  1, 1,  1,
    1,  6,  1,  7,  8,  1,  9,  9,  9,  9,  9,  9,  9, 9,  9,  9,  1,  1,  1, 1,  1,
    1,  1,  10, 11, 12, 1,  13, 14, 1,  1,  15, 1,  1, 16, 17, 18, 19, 20, 1, 21, 22,
    23, 1,  1,  24, 1,  1,  1,  25, 1,  26, 1,  1,  1, 27, 28, 29, 30,

    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 43, 44, 45, 46, 47, 1, 48, 49,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static const YY_CHAR yy_meta[50] = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

static const flex_int16_t yy_base[338] = {
    0,   0,   0,   377, 378, 378, 378, 372, 372, 42,  365, 44,  25,  28,  338, 26,  22,  31,  345,
    343, 335, 30,  38,  33,  328, 378, 378, 364, 378, 364, 378, 357, 51,  64,  65,  71,  336, 333,
    318, 323, 43,  323, 329, 52,  326, 317, 42,  327, 317, 319, 306, 306, 307, 312, 323, 322, 300,
    320, 303, 79,  80,  336, 335, 312, 315, 298, 309, 310, 295, 53,  297, 298, 304, 300, 296, 301,
    300, 295, 298, 297, 296, 295, 298, 282, 285, 280, 276, 280, 281, 309, 308, 84,  278, 299, 279,
    270, 285, 281, 378, 279, 264,

    262, 274, 261, 295, 286, 260, 256, 271, 271, 261, 255, 252, 258, 264, 263, 247, 248, 261, 281,
    280, 257, 252, 258, 258, 239, 72,  240, 247, 251, 237, 257, 233, 250, 241, 236, 257, 228, 258,
    227, 239, 238, 378, 378, 225, 67,  89,  224, 233, 219, 378, 241, 214, 222, 378, 216, 229, 232,
    217, 378, 218, 229, 240, 77,  99,  219, 222, 378, 209, 220, 209, 222, 217, 207, 219, 211, 199,
    200, 198, 214, 191, 378, 194, 192, 206, 198, 195, 189, 203, 201, 191, 190, 191, 209, 378, 378,
    184, 181, 192, 194, 178,

    177, 190, 193, 196, 173, 378, 176, 173, 185, 378, 169, 182, 177, 178, 180, 165, 163, 164, 167,
    174, 169, 378, 162, 180, 90,  161, 157, 168, 155, 168, 179, 164, 151, 147, 157, 378, 146, 159,
    154, 102, 378, 148, 144, 145, 154, 144, 139, 155, 159, 378, 149, 89,  136, 143, 138, 136, 148,
    131, 142, 141, 131, 378, 378, 124, 136, 138, 135, 126, 116, 378, 119, 133, 130, 134, 378, 378,
    120, 378, 119, 125, 127, 113, 120, 378, 113, 109, 108, 120, 115, 122, 110, 118, 101, 110, 378,
    115, 103, 99,  109, 95,

    96,  92,  108, 378, 105, 108, 94,  102, 378, 93,  90,  99,  94,  89,  96,  378, 81,  378, 378,
    378, 82,  85,  96,  378, 378, 87,  82,  378, 81,  77,  378, 378, 77,  378, 378, 108, 105};

static const flex_int16_t yy_def[338] = {
    0,   335, 1,   335, 335, 335, 335, 336, 337, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 336, 335, 337, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335,

    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335,

    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335,

    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 0,   335, 335};

static const flex_int16_t yy_nxt[428] = {
    0,   4,   5,   6,   7,   8,   4,   9,   10,  11,  12,  4,   13,  4,   14,  15,  16,
    17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  4,   4,   4,   4,   4,   4,   4,
    4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   31,
    32,  34,  32,  36,  39,  42,  44,  46,  34,  32,  51,  47,  45,  56,  53,  43,  54,
    37,  40,  38,  52,  55,  33,  60,  35,  57,  61,  61,  75,  62,  71,  35,  67,  68,
    89,  89,  76,  90,  60,  119, 119, 98,  120, 152, 59,  35,  72,  99,  170, 172,

    245, 173, 246, 187, 171, 29,  153, 188, 27,  189, 91,  190, 260, 191, 261, 271, 334,
    333, 332, 272, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318,
    317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301,
    300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284,
    283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 270, 269, 268, 267, 266, 265,
    264, 263, 262, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248,

    247, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229,
    228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
    211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195,
    194, 193, 192, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 169,
    168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 151, 150,
    149, 148, 147, 120, 120, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137,

    136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 90,
    90,  118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103,
    102, 101, 100, 97,  96,  95,  94,  93,  92,  62,  62,  88,  87,  86,  85,  84,  83,
    82,  81,  80,  79,  78,  77,  74,  73,  70,  69,  66,  65,  64,  63,  33,  30,  28,
    58,  50,  49,  48,  41,  33,  30,  28,  335, 3,   335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,

    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335};

static const flex_int16_t yy_chk[428] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   9,
    9,   11,  11,  12,  13,  15,  16,  17,  32,  32,  21,  17,  16,  23,  22,  15,  22,
    12,  13,  12,  21,  22,  33,  34,  11,  23,  35,  35,  46,  35,  43,  32,  40,  40,
    59,  59,  46,  59,  60,  91,  91,  69,  91,  126, 33,  34,  43,  69,  145, 146,

    225, 146, 225, 163, 145, 337, 126, 163, 336, 164, 60,  164, 240, 164, 240, 252, 333,
    330, 329, 252, 327, 326, 323, 322, 321, 317, 315, 314, 313, 312, 311, 310, 308, 307,
    306, 305, 303, 302, 301, 300, 299, 298, 297, 296, 294, 293, 292, 291, 290, 289, 288,
    287, 286, 285, 283, 282, 281, 280, 279, 277, 274, 273, 272, 271, 269, 268, 267, 266,
    265, 264, 261, 260, 259, 258, 257, 256, 255, 254, 253, 251, 249, 248, 247, 246, 245,
    244, 243, 242, 239, 238, 237, 235, 234, 233, 232, 231, 230, 229, 228, 227,

    226, 224, 223, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 209, 208, 207,
    205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 193, 192, 191, 190, 189, 188, 187,
    186, 185, 184, 183, 182, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169,
    168, 166, 165, 162, 161, 160, 158, 157, 156, 155, 153, 152, 151, 149, 148, 147, 144,
    141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 125, 124,
    123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109,

    108, 107, 106, 105, 104, 103, 102, 101, 100, 99,  97,  96,  95,  94,  93,  92,  90,
    89,  88,  87,  86,  85,  84,  83,  82,  81,  80,  79,  78,  77,  76,  75,  74,  73,
    72,  71,  70,  68,  67,  66,  65,  64,  63,  62,  61,  58,  57,  56,  55,  54,  53,
    52,  51,  50,  49,  48,  47,  45,  44,  42,  41,  39,  38,  37,  36,  31,  29,  27,
    24,  20,  19,  18,  14,  10,  8,   7,   3,   335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,

    335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
    335, 335, 335, 335, 335, 335, 335, 335, 335, 335};

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[47] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
};

static const flex_int16_t yy_rule_linenum[46] = {0,  32, 43, 44, 45, 46, 47, 48,  49,  50, 52, 53,
                                                 55, 56, 57, 58, 60, 61, 62, 63,  64,  66, 67, 68,
                                                 69, 70, 71, 72, 73, 75, 77, 78,  79,  80, 81, 83,
                                                 84, 85, 87, 88, 89, 91, 98, 105, 114, 116};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexical++.l"
#line 2 "lexical++.l"
#include "syntax.tab.hpp"
#include "tokenizer.h"
#include "tree.h"
#include <cstdio>
#include <cstdlib>

bool push_include_file(const char*);
#define LEX_DEBUG
#ifndef LEX_DEBUG
#define ldebug(...)                                                                                \
    do {                                                                                           \
        printf(__VA_ARGS__);                                                                       \
        putchar('\n');                                                                             \
    } while (0)
#else
#define ldebug(...) 0
#endif

using token = pbr::Parser::token_type;

#undef YY_DECL
#define YY_DECL int pbr::Tokenizer::yylex(Parser::semantic_type* const lval)
#line 732 "lex.yy.cpp"
#line 733 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void*
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy(char*, const char*, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char*);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput(yytext, yyleng)
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                            \
    /* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */        \
                                                                                                   \
    /* %if-c++-only C++ definition \ */                                                            \
    if ((int)(result = LexerInput((char*)buf, max_size)) < 0)                                      \
        YY_FATAL_ERROR("input in flex scanner failed");
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError(msg)
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
    yy_state_type yy_current_state;
    char *        yy_cp, *yy_bp;
    int           yy_act;

    if (!(yy_init)) {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (!(yy_start))
            (yy_start) = 1; /* first start state */

        if (!yyin)
            /* %if-c-only */
            /* %endif */
            /* %if-c++-only */
            yyin.rdbuf(std::cin.rdbuf());
        /* %endif */

        if (!yyout)
            /* %if-c-only */
            /* %endif */
            /* %if-c++-only */
            yyout.rdbuf(std::cout.rdbuf());
        /* %endif */

        if (!YY_CURRENT_BUFFER) {
            yyensure_buffer_stack();
            YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
        }

        yy_load_buffer_state();
    }

    {
/* %% [7.0] user's declarations go here */
#line 30 "lexical++.l"


#line 916 "lex.yy.cpp"

        while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
        {
            /* %% [8.0] yymore()-related code goes here */
            yy_cp = (yy_c_buf_p);

            /* Support of yytext. */
            *yy_cp = (yy_hold_char);

            /* yy_bp points to the position in yy_ch_buf of the start of
             * the current run.
             */
            yy_bp = yy_cp;

            /* %% [9.0] code to set up and find next match goes here */
            yy_current_state = (yy_start);
        yy_match:
            do {
                YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                if (yy_accept[yy_current_state]) {
                    (yy_last_accepting_state) = yy_current_state;
                    (yy_last_accepting_cpos)  = yy_cp;
                }
                while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
                    yy_current_state = (int)yy_def[yy_current_state];
                    if (yy_current_state >= 336)
                        yy_c = yy_meta[yy_c];
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
                ++yy_cp;
            } while (yy_current_state != 335);
            yy_cp            = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);

        yy_find_action:
            /* %% [10.0] code to find the action number goes here */
            yy_act = yy_accept[yy_current_state];

            YY_DO_BEFORE_ACTION;

            /* %% [11.0] code for yylineno update goes here */

            if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act]) {
                int yyl;
                for (yyl = 0; yyl < yyleng; ++yyl)
                    if (yytext[yyl] == '\n')

                        yylineno++;
                ;
            }

        do_action: /* This label is used only to access EOF actions. */

            /* %% [12.0] debug code goes here */
            if (yy_flex_debug) {
                if (yy_act == 0)
                    std::cerr << "--scanner backing up\n";
                else if (yy_act < 46)
                    std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] << "(\""
                              << yytext << "\")\n";
                else if (yy_act == 46)
                    std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
                else if (yy_act == 47)
                    std::cerr << "--(end of buffer or a NUL)\n";
                else
                    std::cerr << "--EOF (start condition " << YY_START << ")\n";
            }

            switch (yy_act) { /* beginning of action switch */
                              /* %% [13.0] actions go here */
                case 0:       /* must back up */
                    /* undo the effects of YY_DO_BEFORE_ACTION */
                    *yy_cp           = (yy_hold_char);
                    yy_cp            = (yy_last_accepting_cpos);
                    yy_current_state = (yy_last_accepting_state);
                    goto yy_find_action;

                case 1:
                    YY_RULE_SETUP
#line 32 "lexical++.l"
                    {
                        ldebug("KW: Include");
                        // printf("dummy lval\n");
                        Parser::semantic_type dummy_lval;
                        yylex(&dummy_lval);
                        printf("file name after include: %s\n", yytext);
                        push_include_file(dummy_lval.as<std::string>());
                        dummy_lval.destroy<std::string>();
                        // dummy_lval.clear();
                    }
                    YY_BREAK
                case 2:
                    YY_RULE_SETUP
#line 43 "lexical++.l"
                    {
                        ldebug("KW: Lookat");
                        return token::KW_LOOKAT;
                    }
                    YY_BREAK
                case 3:
                    YY_RULE_SETUP
#line 44 "lexical++.l"
                    {
                        ldebug("KW: camera");
                        return token::KW_CAMERA;
                    }
                    YY_BREAK
                case 4:
                    YY_RULE_SETUP
#line 45 "lexical++.l"
                    {
                        ldebug("KW: Integrator");
                        return token::KW_INTEGRATOR;
                    }
                    YY_BREAK
                case 5:
                    YY_RULE_SETUP
#line 46 "lexical++.l"
                    {
                        ldebug("KW: Accelerator");
                        return token::KW_ACCELERATOR;
                    }
                    YY_BREAK
                case 6:
                    YY_RULE_SETUP
#line 47 "lexical++.l"
                    {
                        ldebug("KW: Sampler");
                        return token::KW_SAMPLER;
                    }
                    YY_BREAK
                case 7:
                    YY_RULE_SETUP
#line 48 "lexical++.l"
                    {
                        ldebug("KW: Film");
                        return token::KW_FILM;
                    }
                    YY_BREAK
                case 8:
                    YY_RULE_SETUP
#line 49 "lexical++.l"
                    {
                        ldebug("KW: Filter");
                        return token::KW_FILTER;
                    }
                    YY_BREAK
                case 9:
                    YY_RULE_SETUP
#line 50 "lexical++.l"
                    {
                        ldebug("Should not appear");
                        std::exit(1);
                    }
                    YY_BREAK
                case 10:
                    YY_RULE_SETUP
#line 52 "lexical++.l"
                    {
                        ldebug("KW: WBegin");
                        return token::KW_WORLD_BEG;
                    }
                    YY_BREAK
                case 11:
                    YY_RULE_SETUP
#line 53 "lexical++.l"
                    {
                        ldebug("KW: WEnd  ");
                        return token::KW_WORLD_END;
                    }
                    YY_BREAK
                case 12:
                    YY_RULE_SETUP
#line 55 "lexical++.l"
                    {
                        ldebug("KW: ABegin");
                        return token::KW_ATTR_BEG;
                    }
                    YY_BREAK
                case 13:
                    YY_RULE_SETUP
#line 56 "lexical++.l"
                    {
                        ldebug("KW: AEnd  ");
                        return token::KW_ATTR_END;
                    }
                    YY_BREAK
                case 14:
                    YY_RULE_SETUP
#line 57 "lexical++.l"
                    {
                        ldebug("KW: TransBegin");
                        return token::KW_TRANS_BEG;
                    }
                    YY_BREAK
                case 15:
                    YY_RULE_SETUP
#line 58 "lexical++.l"
                    {
                        ldebug("KW: TransEnd");
                        return token::KW_TRANS_END;
                    }
                    YY_BREAK
                case 16:
                    YY_RULE_SETUP
#line 60 "lexical++.l"
                    {
                        ldebug("KW: LSrc");
                        return token::KW_LIGHT_SRC;
                    }
                    YY_BREAK
                case 17:
                    YY_RULE_SETUP
#line 61 "lexical++.l"
                    {
                        ldebug("KW: AreaLSrc");
                        return token::KW_AREA_LIGHT_SRC;
                    }
                    YY_BREAK
                case 18:
                    YY_RULE_SETUP
#line 62 "lexical++.l"
                    {
                        ldebug("KW: Material");
                        return token::KW_MATERIAL;
                    }
                    YY_BREAK
                case 19:
                    YY_RULE_SETUP
#line 63 "lexical++.l"
                    {
                        ldebug("KW: Shape");
                        return token::KW_SHAPE;
                    }
                    YY_BREAK
                case 20:
                    YY_RULE_SETUP
#line 64 "lexical++.l"
                    {
                        ldebug("KW: Texture");
                        return token::KW_TEXTURE;
                    }
                    YY_BREAK
                case 21:
                    YY_RULE_SETUP
#line 66 "lexical++.l"
                    {
                        ldebug("KW: Identity");
                        return token::KW_IDENTITY;
                    }
                    YY_BREAK
                case 22:
                    YY_RULE_SETUP
#line 67 "lexical++.l"
                    {
                        ldebug("KW: Translate");
                        return token::KW_TRANSLATE;
                    }
                    YY_BREAK
                case 23:
                    YY_RULE_SETUP
#line 68 "lexical++.l"
                    {
                        ldebug("KW: Scale");
                        return token::KW_SCALE;
                    }
                    YY_BREAK
                case 24:
                    YY_RULE_SETUP
#line 69 "lexical++.l"
                    {
                        ldebug("KW: Rotate");
                        return token::KW_ROTATE;
                    }
                    YY_BREAK
                case 25:
                    YY_RULE_SETUP
#line 70 "lexical++.l"
                    {
                        ldebug("KW: Coord System");
                        return token::KW_COORD_SYSTEM;
                    }
                    YY_BREAK
                case 26:
                    YY_RULE_SETUP
#line 71 "lexical++.l"
                    {
                        ldebug("KW: CoordSysTrans");
                        return token::KW_COORD_SYSTEM_TRANS;
                    }
                    YY_BREAK
                case 27:
                    YY_RULE_SETUP
#line 72 "lexical++.l"
                    {
                        ldebug("KW: Transfrom");
                        return token::KW_TRANSFORM;
                    }
                    YY_BREAK
                case 28:
                    YY_RULE_SETUP
#line 73 "lexical++.l"
                    {
                        ldebug("KW: ConcatTransform");
                        return token::KW_CONCAT_TRANSFORM;
                    }
                    YY_BREAK
                case 29:
                    YY_RULE_SETUP
#line 75 "lexical++.l"
                    {
                        ldebug("KW: RevOrientation");
                        return token::KW_REVERSE_ORIENTATION;
                    }
                    YY_BREAK
                case 30:
                    YY_RULE_SETUP
#line 77 "lexical++.l"
                    {
                        ldebug("KW: MediumInterface");
                        return token::KW_MEDIUM_INTERFACE;
                    }
                    YY_BREAK
                case 31:
                    YY_RULE_SETUP
#line 78 "lexical++.l"
                    {
                        ldebug("KW: NamedMedium");
                        return token::KW_NAMED_MEDIUM;
                    }
                    YY_BREAK
                case 32:
                    YY_RULE_SETUP
#line 79 "lexical++.l"
                    {
                        ldebug("KW: MakeNamedMedium");
                        return token::KW_MAKE_NAMED_MEDIUM;
                    }
                    YY_BREAK
                case 33:
                    YY_RULE_SETUP
#line 80 "lexical++.l"
                    {
                        ldebug("KW: NamedMaterial");
                        return token::KW_NAMED_MATERIAL;
                    }
                    YY_BREAK
                case 34:
                    YY_RULE_SETUP
#line 81 "lexical++.l"
                    {
                        ldebug("KW: MakeNamedMaterial");
                        return token::KW_MAKE_NAMED_MATERIAL;
                    }
                    YY_BREAK
                case 35:
                    YY_RULE_SETUP
#line 83 "lexical++.l"
                    {
                        ldebug("KW: OBegin");
                        return token::KW_OBJ_BEG;
                    }
                    YY_BREAK
                case 36:
                    YY_RULE_SETUP
#line 84 "lexical++.l"
                    {
                        ldebug("KW: OEnd  ");
                        return token::KW_OBJ_END;
                    }
                    YY_BREAK
                case 37:
                    YY_RULE_SETUP
#line 85 "lexical++.l"
                    {
                        ldebug("KW: ObjectInstance");
                        return token::KW_OBJ_INST;
                    }
                    YY_BREAK
                case 38:
                    YY_RULE_SETUP
#line 87 "lexical++.l"
                    {
                        ldebug("TOKEN: LB");
                        return '[';
                    }
                    YY_BREAK
                case 39:
                    YY_RULE_SETUP
#line 88 "lexical++.l"
                    {
                        ldebug("TOKEN: RB");
                        return ']';
                    }
                    YY_BREAK
                case 40:
                    /* rule 40 can match eol */
                    YY_RULE_SETUP
#line 89 "lexical++.l"
                    {}
                    YY_BREAK
                case 41:
                    YY_RULE_SETUP
#line 91 "lexical++.l"
                    {
                        ldebug("FLOAT: %s", yytext);
                        float f_value = static_cast<float>(std::atof(yytext));
                        assert(lval);
                        lval->build(f_value);
                        return token::NUMBER;
                    }
                    YY_BREAK
                case 42:
                    YY_RULE_SETUP
#line 98 "lexical++.l"
                    {
                        ldebug("FLOAT: %s", yytext);
                        assert(lval);
                        float f_value = static_cast<float>(std::atof(yytext));
                        lval->build(f_value);
                        return token::NUMBER;
                    }
                    YY_BREAK
                case 43:
                    /* rule 43 can match eol */
                    YY_RULE_SETUP
#line 105 "lexical++.l"
                    {
                        ldebug("STR: %s\n", yytext);
                        assert(yytext[0] == '\"');
                        assert(yytext[yyleng - 1] == '\"');
                        yytext[yyleng - 1] = '\0';
                        assert(lval);
                        lval->build(std::string(yytext + 1));
                        return token::STRLIT;
                    }
                    YY_BREAK
                case 44:
                    /* rule 44 can match eol */
                    YY_RULE_SETUP
#line 114 "lexical++.l"
                    {
                        ldebug("comments");
                    }
                    YY_BREAK
                case 45:
                    YY_RULE_SETUP
#line 116 "lexical++.l"
                    {
                        printf("Unrecognized token \'%s\' at line %d\n", yytext, yylineno);
                        std::exit(1);
                    }
                    YY_BREAK
                case 46:
                    YY_RULE_SETUP
#line 118 "lexical++.l"
                    YY_FATAL_ERROR("flex scanner jammed");
                    YY_BREAK
#line 1260 "lex.yy.cpp"
                case YY_STATE_EOF(INITIAL):
                    yyterminate();

                case YY_END_OF_BUFFER: {
                    /* Amount of text matched not including the EOB char. */
                    int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

                    /* Undo the effects of YY_DO_BEFORE_ACTION. */
                    *yy_cp = (yy_hold_char);
                    YY_RESTORE_YY_MORE_OFFSET

                    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between YY_CURRENT_BUFFER and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        /* %if-c-only */
                        /* %endif */
                        /* %if-c++-only */
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
                        /* %endif */
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                    /* Note that here we test for yy_c_buf_p "<=" to the position
                     * of the first EOB in the buffer, since yy_c_buf_p will
                     * already have been incremented past the NUL character
                     * (since all states make transitions on EOB to the
                     * end-of-buffer state).  Contrast this with the test
                     * in input().
                     */
                    if ((yy_c_buf_p)
                        <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really
                                                                                    a NUL. */
                        yy_state_type yy_next_state;

                        (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans(yy_current_state);

                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                        if (yy_next_state) {
                            /* Consume the NUL. */
                            yy_cp            = ++(yy_c_buf_p);
                            yy_current_state = yy_next_state;
                            goto yy_match;
                        }

                        else {
                            /* %% [14.0] code to do back-up for compressed tables and set up yy_cp
                             * goes here */
                            yy_cp            = (yy_last_accepting_cpos);
                            yy_current_state = (yy_last_accepting_state);
                            goto yy_find_action;
                        }
                    }

                    else
                        switch (yy_get_next_buffer()) {
                            case EOB_ACT_END_OF_FILE: {
                                (yy_did_buffer_switch_on_eof) = 0;

                                if (yywrap()) {
                                    /* Note: because we've taken care in
                                     * yy_get_next_buffer() to have set up
                                     * yytext, we can now set up
                                     * yy_c_buf_p so that if some total
                                     * hoser (like flex itself) wants to
                                     * call the scanner after we return the
                                     * YY_NULL, it'll still work - another
                                     * YY_NULL will get returned.
                                     */
                                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                }

                                else {
                                    if (!(yy_did_buffer_switch_on_eof))
                                        YY_NEW_FILE;
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                    break;
                }

                default:
                    YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
            } /* end of action switch */
        }     /* end of scanning one token */
    }         /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout)
    : yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf())
    , yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
    ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream& arg_yyin, std::ostream& arg_yyout)
    : yyin(arg_yyin.rdbuf())
    , yyout(arg_yyout.rdbuf())
{
    ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
    yy_c_buf_p    = 0;
    yy_init       = 0;
    yy_start      = 0;
    yy_flex_debug = 0;
    yylineno      = 1;  // this will only get updated if %option yylineno

    yy_did_buffer_switch_on_eof = 0;

    yy_looking_for_trail_begin = 0;
    yy_more_flag               = 0;
    yy_more_len                = 0;
    yy_more_offset = yy_prev_more_offset = 0;

    yy_start_stack_ptr = yy_start_stack_depth = 0;
    yy_start_stack                            = NULL;

    yy_buffer_stack     = NULL;
    yy_buffer_stack_top = 0;
    yy_buffer_stack_max = 0;

    yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
    delete[] yy_state_buf;
    yyfree(yy_start_stack);
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yyfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream& new_in, std::ostream& new_out)
{
    // was if( new_in )
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));

    // was if( new_out )
    yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
    if (!new_in) {
        new_in = &yyin;
    }

    if (!new_out) {
        new_out = &yyout;
    }

    switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{
    if (yyin.eof() || yyin.fail())
        return 0;

#ifdef YY_INTERACTIVE
    yyin.get(buf[0]);

    if (yyin.eof())
        return 0;

    if (yyin.bad())
        return -1;

    return 1;

#else
    (void)yyin.read(buf, max_size);

    if (yyin.bad())
        return -1;
    else
        return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
    (void)yyout.write(buf, size);
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    char* dest   = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char* source = (yytext_ptr);
    int   number_to_move, i;
    int   ret_val;

    if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
        YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

    if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is
                                                            an EOF. */
        if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)-1);

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else {
        int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

            if (b->yy_is_our_buffer) {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char*)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc((void*)b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2));
            } else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = NULL;

            if (!b->yy_ch_buf)
                YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ((yy_n_chars) == 0) {
        if (number_to_move == YY_MORE_ADJ) {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin);
        }

        else {
            ret_val                                    = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
            (char*)yyrealloc((void*)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size);
        if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
            YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
        /* "- 2" to take care of EOB's */
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int)(new_size - 2);
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]     = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
    yy_state_type yy_current_state;
    char*         yy_cp;

    /* %% [15.0] code to get the start state into yy_current_state goes here */
    yy_current_state = (yy_start);

    for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
        /* %% [16.0] code to find the next state goes here */
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state]) {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos)  = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
            yy_current_state = (int)yy_def[yy_current_state];
            if (yy_current_state >= 336)
                yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
/* %endif */
{
    int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
    char* yy_cp = (yy_c_buf_p);

    YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state]) {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos)  = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 336)
            yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam        = (yy_current_state == 335);

    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyunput(int c, char* yy_bp)
/* %endif */
{
    char* yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2) { /* need to shift things up to make room
                                                            */
        /* +2 for EOB chars. */
        int   number_to_move = (yy_n_chars) + 2;
        char* dest =
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        char* source = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
            *--dest = *--source;

        yy_cp += (int)(dest - source);
        yy_bp += (int)(dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) =
            (int)YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
            YY_FATAL_ERROR("flex scanner push-back overflow");
    }

    *--yy_cp = (char)c;

    /* %% [18.0] update yylineno here */

    if (c == '\n') {
        --yylineno;
    }

    (yytext_ptr)   = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p)   = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yyinput()
/* %endif */
{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
            /* This was really a NUL. */
            *(yy_c_buf_p) = '\0';

        else { /* need more input */
            int offset = (int)((yy_c_buf_p) - (yytext_ptr));
            ++(yy_c_buf_p);

            switch (yy_get_next_buffer()) {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin);

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE: {
                    if (yywrap())
                        return 0;

                    if (!(yy_did_buffer_switch_on_eof))
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c              = *(unsigned char*)(yy_c_buf_p); /* cast for 8-bit char's */
    *(yy_c_buf_p)  = '\0';                          /* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    /* %% [19.0] update BOL and yylineno */
    if (c == '\n')

        yylineno++;
    ;

    return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyrestart(std::istream& input_file)
/* %endif */
{

    if (!YY_CURRENT_BUFFER) {
        yyensure_buffer_stack();
        YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file);
    yy_load_buffer_state();
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{
    if (!input_file) {
        input_file = &yyin;
    }
    yyrestart(*input_file);
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
/* %endif */
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack();
    if (YY_CURRENT_BUFFER == new_buffer)
        return;

    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p)                        = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    /* %if-c-only */
    /* %endif */
    /* %if-c++-only */
    yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
    /* %endif */
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream& file, int size)
/* %endif */
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char*)yyalloc((yy_size_t)(b->yy_buf_size + 2));
    if (!b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file);

    return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
    return yy_create_buffer(*file, size);
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
/* %endif */
{

    if (!b)
        return;

    if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

    if (b->yy_is_our_buffer)
        yyfree((void*)b->yy_ch_buf);

    yyfree((void*)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream& file)
/* %endif */

{
    int oerrno = errno;

    yy_flush_buffer(b);

    /* %if-c-only */
    /* %endif */
    /* %if-c++-only */
    b->yy_input_file = file.rdbuf();
    /* %endif */
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER) {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    /* %if-c-only */
    /* %endif */
    /* %if-c++-only */
    b->yy_is_interactive = 0;
    /* %endif */
    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
/* %endif */
{
    if (!b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol        = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == YY_CURRENT_BUFFER)
        yy_load_buffer_state();
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
/* %endif */
{
    if (new_buffer == NULL)
        return;

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p)                        = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state(void)
/* %endif */
{
    if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state();
        (yy_did_buffer_switch_on_eof) = 1;
    }
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack)) {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        (yy_buffer_stack) =
            (struct yy_buffer_state**)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state*));
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) =
            (struct yy_buffer_state**)yyrealloc((yy_buffer_stack),
                                                num_to_alloc * sizeof(struct yy_buffer_state*));
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0,
               grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_push_state(int _new_state)
/* %endif */
{
    if ((yy_start_stack_ptr) >= (yy_start_stack_depth)) {
        yy_size_t new_size;

        (yy_start_stack_depth) += YY_START_STACK_INCR;
        new_size = (yy_size_t)(yy_start_stack_depth) * sizeof(int);

        if (!(yy_start_stack))
            (yy_start_stack) = (int*)yyalloc(new_size);

        else
            (yy_start_stack) = (int*)yyrealloc((void*)(yy_start_stack), new_size);

        if (!(yy_start_stack))
            YY_FATAL_ERROR("out of memory expanding start-condition stack");
    }

    (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

    BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yy_pop_state()
/* %endif */
{
    if (--(yy_start_stack_ptr) < 0)
        YY_FATAL_ERROR("start-condition stack underflow");

    BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_top_state()
/* %endif */
{
    return (yy_start_stack)[(yy_start_stack_ptr)-1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError(const char* msg)
{
    std::cerr << msg << std::endl;
    exit(YY_EXIT_FAILURE);
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                                                                  \
    do {                                                                                           \
        /* Undo effects of setting up yytext. */                                                   \
        int yyless_macro_arg = (n);                                                                \
        YY_LESS_LINENO(yyless_macro_arg);                                                          \
        yytext[yyleng] = (yy_hold_char);                                                           \
        (yy_c_buf_p)   = yytext + yyless_macro_arg;                                                \
        (yy_hold_char) = *(yy_c_buf_p);                                                            \
        *(yy_c_buf_p)  = '\0';                                                                     \
        yyleng         = yyless_macro_arg;                                                         \
    } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, const char* s2, int n)
{

    int i;
    for (i = 0; i < n; ++i)
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char* s)
{
    int n;
    for (n = 0; s[n]; ++n)
        ;

    return n;
}
#endif

void* yyalloc(yy_size_t size)
{
    return malloc(size);
}

void* yyrealloc(void* ptr, yy_size_t size)
{

    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return realloc(ptr, size);
}

void yyfree(void* ptr)
{
    free((char*)ptr); /* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 118 "lexical++.l"


int pbr::Tokenizer::yywrap()
{
    if (pop_include_file()) {
        return 0;
    } else {
        return 1;
    }
}

int yyFlexLexer::yywrap()
{
    std::cerr << "shouldn't be reached";
    return 1;
}
