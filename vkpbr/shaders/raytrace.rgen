#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#include "raycommon.glsl"
#include "sampling.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 1) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
}
cam;

layout(push_constant) uniform Constants
{
    vec4  clearColor;
    vec3  lightPosition;
    float lightIntensity;
    int   lightType;
    int   accumulated_frames;
}
pushC;

void main()
{

    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    //  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(rnd(seed), rnd(seed));
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d    = inUV * 2.0 - 1.0;

    vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.hitValue = vec3(0.0);
    prd.seed     = seed;
    prd.depth    = 0;

    // Main path-tracing loop.
    prd.ray_origin = origin.xyz;
    prd.ray_direction = direction.xyz;
    prd.weight = vec3(0);

    vec3 current_weight = vec3(1, 1, 1);
    vec3 hit_value = vec3(0, 0, 0);

    for (; prd.depth < 10; ++prd.depth) {
        traceRayEXT(topLevelAS,     // acceleration structure
                    rayFlags,       // rayFlags
                    0xFF,           // cullMask
                    0,              // sbtRecordOffset
                    0,              // sbtRecordStride
                    0,              // missIndex
                    prd.ray_origin,     // ray origin
                    tMin,           // ray min range
                    prd.ray_direction,  // ray direction
                    tMax,           // ray max range
                    0               // payload (location = 0)
        );

        hit_value += prd.hitValue * current_weight;
        current_weight *= prd.weight;
    }

    if (pushC.accumulated_frames > 0) {
        float a         = 1.0f / float(pushC.accumulated_frames + 1);
        vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hit_value, a), 1.0f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hit_value, 1.0));
    }
}
